[ 프로젝트 및 app 생성 및 초기 셋팅]

---------------------------------------------------------------------

1. 프로젝트 생성
django-admin startproject mini_project

---------------------------------------------------------------------

2. 앱 생성
- 생성된 프로젝트 폴더에 manage.py 파일이 있는 곳으로 이동해서 입력한다.
python manage.py startapp main_app
python manage.py startapp user_app
python manage.py startapp board_app

---------------------------------------------------------------------

3. 각 app에 urls.py 파일을 생성하고 다음 코드를 넣어준다.
from django.urls import path
from . import views

urlpatterns = [
    
]

---------------------------------------------------------------------

4. mini_project 의 urls.py 파일에 각 app의 urls.py를 등록해준다.
from django.urls import include

# 주소만 입력했을 경우(메인 페이지)
path('', include('main_app.urls')),
# 사용자 관련
path('user/', include('user_app.urls')),
# 게시판 관련
path('board/', include('board_app.urls')),

---------------------------------------------------------------------

5. mini_project/settings.py 에 app을 등록해준다.

INSTALLED_APPS = [
    .....
    'main_app.apps.MainAppConfig',
    'user_app.apps.UserAppConfig',
    'board_app.apps.BoardAppConfig',
]

---------------------------------------------------------------------

6. 각 app에 templates 폴더를 각각 생성해준다.

---------------------------------------------------------------------

7. migration 작업을 수행한다.
cmd 창에서 manage.py 파일이 있는 곳에서...
python manage.py migrate

---------------------------------------------------------------------

[ HTML 파일 셋팅]

---------------------------------------------------------------------

1. 각 app의 templates 폴더에 html 파일을 넣어준다.
main_app/templates - index.html
use_app/templates - join.html, login.html, user_modify.html
board_app/templates - board_main.html, board_modify.html, board_read.html, board_write.html

---------------------------------------------------------------------

2. 첫 페이지 요청을 처리한다.
main_app/views.py - index 함수를 작성한다.
main_app/urls.py - index 함수에 대한 주소 매핑 코드를 작성한다.

---------------------------------------------------------------------

[ 공통 영역(상단 메뉴, 하단 정보) 처리]

---------------------------------------------------------------------

1. 상단 메뉴, 하단 정보 같은 공통 영역의 html 파일을 넣어둘 폴더를 생성한다.
프로젝트 폴더에 templates 폴더를 만들어준다.
mini_project/templates

---------------------------------------------------------------------

2. mini_project/settings.py 파일에 mini_project/templates 폴더를 등록해준다.

import os

TEMPLATES = [
    {
       ....
        'DIRS': [os.path.join(BASE_DIR, 'mini_project', 'templates')],
       ....
    }
]

---------------------------------------------------------------------

3. 마이그레이션을 해준다.
python manage.py migrate

---------------------------------------------------------------------

4. mini_project/templates 폴더에 top_menu.html, bottom_info.html 파일을 생성한다.

---------------------------------------------------------------------

5. main_app/templates/index.html 에서 상단 메뉴 부분과 하단 정보 부분을 잘라내어
mini_project/templates/top_menu.html과 bottom_info.html 에 각각 넣어준다.

---------------------------------------------------------------------

6. html 파일에 상단 메뉴 부분과 하단 정보 부분에 html 을 include 해 준다.
{% include 'top_menu.html' %}
{% include 'bottom_info.html' %}

---------------------------------------------------------------------

7. top_menu.html 의 각 주소를 셋팅해준다.

자유게시판, 유머게시판, 정치게시판, 스포츠게시판 - board/board_main
로그인 - user/login
회원가입 - user/join
정보수정 - user/modify_user
로그아웃 - /

---------------------------------------------------------------------

8. user_app/views.py 파일에 요청시 호출될 함수를 만들어준다.
    board_app/views.py 파일에 요청시 호출될 함수를 만들어준다.
---------------------------------------------------------------------

9. user_app/urls.py 파일에 요청 주소와 호출될 함수를 등록해준다.
    board_app/urls.py 파일에 요청 주소와 호출될 함수를 등록해준다.
---------------------------------------------------------------------

10. 모든 html 파일의 상단 메뉴와 하단 정보를 include 코드로 변경해준다.

---------------------------------------------------------------------

[ 데이터 베이스 연동 설정]

---------------------------------------------------------------------

1. 데이터베이스 연동을 위한 라이브러리를 설치한다.
    pip install mysqlclient
---------------------------------------------------------------------

2. mini_project/settings.py 파일에 데이터 베이스 접속 정보를 설정해준다.

DATABASES = {
    'default': {
        # 데이터베이스 엔진 명. 그대로..
        'ENGINE': 'django.db.backends.mysql',
        # 데이터베이스 이름. 사전에 데이터베이스가 생성되어 있어야 한다.
        'NAME': 'board_db',
        # 접속 계정
        'USER' : 'root',
        # 접속 비밀번호
        'PASSWORD' : '1234',
        # MySql이 설치된 컴퓨터 IP 혹은 도메인
        'HOST' : 'localhost',
        # 포트번호 (기본 : 3306)
        'PORT' : '3307'
    }
}

강사 컴퓨터에 3306번 포트를 쓰는 프로그램이 있어서 3307로 했습니다~
---------------------------------------------------------------------

3. 생성하고자 하는 테이블의 구조에 맞게 각 app의 model 을 작성해준다.
https://velog.io/@ash3767/django-%EC%A7%80%EC%9B%90%EB%90%98%EB%8A%94-%EB%AA%A8%EB%8D%B8-%ED%95%84%EB%93%9C%ED%83%80%EC%9E%85

---------------------------------------------------------------------

4. MySql 에 데이터베이스를 생성해준다.
MySQL Workbench 에서
create database board_db;

---------------------------------------------------------------------

5. 마이그레이션 작업을 한다.
python manage.py makemigrations
python manage.py migrate

---------------------------------------------------------------------

6. main_app/views/index 함수에 board_info_table에 기본 데이터를
    저장하는 코드를 동작시키고 주석처리 해준다.
---------------------------------------------------------------------

[ 상단 메뉴 데이터 베이스 연동 처리]

---------------------------------------------------------------------

1. 상단 메뉴의 게시판 링크는 데이터베이스에서 게시판 정보를 읽어와 구성하도록 할것이다.
상단 메뉴는 모든 요청에 대해 처리해줘야 하기 때문에 views.py에 있는 모든 함수에
똑같은 코드를 넣어주거나 함수를 호출하는 코드를 넣어줘야 한다.
모든 요청에 대해 공통으로 처리하고 싶은 것이 있다면 미들웨어를 사용한다.

mini_project에 middleware라는 폴더를 만들어준다.
---------------------------------------------------------------------

2. middleware 폴더에 TopMenuMiddleware.py 를 생성하고 코드를 작성해준다.
---------------------------------------------------------------------

3. mini_project/settings.py 에 미들웨어를 등록해준다.

MIDDLEWARE = [
    ...
    'mini_project.middleware.TopMenuMiddleware.TopMenuMiddleware',
]
---------------------------------------------------------------------

4. mini_project/templates/top_menu.html 에 메뉴를 구성하는 코드를 작성한다.

---------------------------------------------------------------------

[ 회원 가입 기능]

---------------------------------------------------------------------

1. 회원 가입 처리를 진행한다.
    user_app/templates/join.html 의 form 태그에 csrf 토큰 설정을 해준다.
    {% csrf_token %}

---------------------------------------------------------------------

2. user_app/urls.py 파일에 join_result 요청을 등록해준다.

urlpatterns = [
    ...
    path('join_result', views.join_result, name='join_result'),
]
---------------------------------------------------------------------

3. user_app/views.py 에 join_result 함수를 만들어주고
    사용자가 입력한 회원 정보를 저장하는 작업을 수행한다.
---------------------------------------------------------------------

[ 로그인 처리 ]

---------------------------------------------------------------------

1. 로그인 처리를 수행한다.
    user_app/templates/login.html 에 있는 로그인 실패 메시지는 login_chk 라는
    파라미터가 1일 경우에만 나타나도록 처리해준다.

    {% if login_chk == '1' %}
    <div class="alert alert-danger">
        <h3>로그인 실패</h3>
        <p>아이디 비밀번호를 확인해주세요</p>
    </div>
    {% endif %}
---------------------------------------------------------------------

2. user_app/views/login 함수에 login_chk 파라미터를 추출하여 
    render_data에 포함시켜주는 작업을 처리 한다.

    # 로그인 확인 여부를 나타나는 파라미터를 추출한다.
    # 지정된 파라미터가 없을 수도 있다면 get 함수를 사용한다.
    login_chk = request.GET.get('login_chk')
    # print(login_chk)

    render_data = {
        'login_chk' : login_chk
    }
---------------------------------------------------------------------

3. user_app/templates/login.html

    form 태그의 action에 주소를 변경해준다.
    csrf token을 설정해준다.

    <form action="/user/login_result" method="post">
		{% csrf_token %}

---------------------------------------------------------------------

4. user_app/urls.py 파일에 /user/login_result 주소를 설정해준다.

path('login_result', views.login_result, name='login_result'),
---------------------------------------------------------------------

5. user_app/views.py 파일에 login_result 함수를 만들어주고
    로그인 처리를 해준다.
---------------------------------------------------------------------

6. mini_project/templates/top_menu.html 에서 사용자 관련 메뉴를
    로그인 여부에 따라 다르게 나타나도록 처리해 준다.


    {% if request.session.login_chk == True %}

    {% else %}
    
    {% endif %}
---------------------------------------------------------------------

[ 로그아웃 ]

---------------------------------------------------------------------

1. 로그아웃 처리를 해준다.
  mini_project/templates/top_menu.html 파일의 로그아웃의 링크를
  /user/logout 으로 변경해준다.
 
  <a href="/user/logout" class="nav-link">로그아웃</a>
---------------------------------------------------------------------

2. user_app/urls.py 파일에 logout 주소를 등록해준다.

    path('logout', views.logout, name='logout'),


---------------------------------------------------------------------

3. user_app/views.py 파일에 logout 함수를 만들어주고
    logout 처리를 해준다.

---------------------------------------------------------------------

[ 회원 정보 수정]

---------------------------------------------------------------------

1. 정보 수정 처리를 진행한다.
    user_app/views.py/modify_user 함수에서 로그인한 사용자 정보를 가져와
    html에 적용한다.

---------------------------------------------------------------------

2. 수정 처리를 진행한다.
    user_app/templates/modify_user.html 의 form 의 action을 /user/modify_user_result 로
    설정해준다.
    csrf_token 을 설정해준다.

---------------------------------------------------------------------

3. user_app/urls.py 에 modify_user_result 주소를 등록해준다.

---------------------------------------------------------------------

4. user_app/views.py 에 modify_user_result 함수를 만들고 
    사용자 정보를 수정하는 처리를 한다.

---------------------------------------------------------------------

[ 로그인 확인 기능]

---------------------------------------------------------------------

1. 로그인 확인 기능을 구현한다.
    mini_project/middleware 에 login_chk_middleware.py 를 만들어준다

---------------------------------------------------------------------

2. 작성한 미들웨어를 mini_project/settings.py에 등록해준다.
'mini_project.middleware.login_chk_middleware.LoginCheckMiddleware',

---------------------------------------------------------------------

[ 게시판 이름 처리]

---------------------------------------------------------------------

1. /board/board_main 에서 게시판 이름이 나오도록 한다.
    board_app/views.py의 board_main 함수에서 board_info_idx 파라미터를 추출한 후에
    게시판 이름 데이터를 가져온다.
    그후, board_app/templates/board_main.html 파일의 게시판 이름에 적용해준다.

---------------------------------------------------------------------

[ 글 쓰기 처리 ]

1. board_app/templates/board_main.html 파일에 글쓰기 링크에
    board_info_idx 파라미터를 붙혀준다.

    /board/board_write?board_info_idx={{board_info_idx}}
---------------------------------------------------------------------

2. 저장 처리를 수행한다.
    board_app/templates/board_write.html 의 form 태그의 주소를 설정해준다.
    csrf_token 설정을 해준다.
---------------------------------------------------------------------

3. board_write.html 의 form 태그에 input type hidden으로 게시판 번호를 설정해준다.

---------------------------------------------------------------------

[글 저장 처리]

---------------------------------------------------------------------
1. board_app/urls.py 파일에 /board/board_write_result 주소를 등록한다.
---------------------------------------------------------------------

2. board_app/views.py 파일에 board_write_result 함수를 작성하고
   파라미터 데이터를 추출해 저장하는 작업을 해준다.
   파일 첨부 처리는 아직 하지 않는다.
---------------------------------------------------------------------

[파일 업로드 처리]
---------------------------------------------------------------------

1. mini_project/settings.py 파일에 업로드할 폴더를 지정해준다.

2. board_app/models/ContentTable 에 있는 content_file을
   FileField로 변경해준다.

3. 마이그레이션을 수행한다.
   python manage.py makemigrations
   python manage.py migrate

4. board_app/templates/board_write.html 에 있는
   form 태그에 multipart-formdata 설정을 해준다.

   <form action="/board/board_write_result" method="post" enctype="multipart/form-data">

5. board_app/views.py 의 board_write_result 함수에 파일처리를 해준다.

------------------------------------------------------------------
[ 글 작성 후 글 보는 페이지로 이동하기]

1. 글 보는 페이지는 글 번호를 파라미터로 받을 것이다.
   따라서 글 작성이 완료되가 되면 작성한 글 번호를 구해 온 다음에 
   글 보는 페이지를 요청하게 한다.

2. 글 번호를 기준으로 내림 차순 정렬 한다.

3. 정렬한 데이터의 가장 첫 번째 것을 가져온다.

------------------------------------------------------------------
[ 글 읽는 페이지 구성하기]

board_app/views.py

1. 파라미터데이터를 추출한다.

2. 파라미터로 전달받은 글 번호에 해당하는 데이터를 가져온다.

3. html 을 구성해준다.

   board_app/templates/board_read.html

------------------------------------------------------------------

[ 이미지 요청하게 하기]

1. board_app/urls.py 파일에 media 파일의 위치를 등록해줘야 한다.

   + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

------------------------------------------------------------------

[ 게시글 목록 구현하기 ]

1. board_app/views.py 의 board_main 함수에서 글 목록 전체를 가져오도록 구현한다.

------------------------------------------------------------------

[페이징]

1. django 에서의 페이징 처리는 글 전체를 가져오고 Paginator 를 이용하여
   현재 페이지에 해당하는 데이터를 가져올 수 있다.

2. board_app/views.py 의 board_main에서 처리한다.

    page_num = request.GET.get('page_num')
    if page_num == None :
        page_num = '1'

    page_num = int(page_num)



    # 페이징을 위한 객체를 생성한다.
    # 첫 번째 : 전체 데이터 목록, 두 번째 : 한 페이지당 보여줄 데이터의 개수
    paginator = Paginator(content_list, 10)
    # 현재 페이지의 데이터 목록을 가져온다.
    content_list = paginator.get_page(page_num)


------------------------------------------------------------------

[ 페이지네이션 처리 ]

1. board_app/templates/board_main.html 의 하단에 있는 페이지 번호 링크를 처리해준다.

2. 일단 1 ~ 10까지 나오도록 작업해준다.

3. 이때 링크도 작업해준다.

   {% for idx in pagenation_data %}
    <li class="page-item">
        <a href="/board/board_main?board_info_idx={{board_info_idx}}&page_num={{idx}}" class="page-link">{{idx}}</a>
    </li>
    {% endfor %}

4. 현재 페이지 / 10 = a1
   a1 % 10 = a2
   a2 * 10 = a3
   a3 + 1 = 최소 값

   최대값 = 최소값 + 9
------------------------------------------------------------------

[ 첫 페이지의 게시판 별 글 다섯개씩 보이는 부분 처리]

1. main_app/views.py 의 index 에서 작업한다.

2. 게시판 정보를 모두 가져온다.

3. 각 게시판 별로 상위 5개를 가져와 출력한다.

------------------------------------------------------------------

[ 글 읽는 화면의 하단 버튼 3개 처리]

각 링크를 작성해 준다.
------------------------------------------------------------------

[ 삭제하기 처리 ]

1. board_app/urls.py 파일에 board_delete 주소를 등록해준다.

2. board_app/views.py 파일에 board_delete 함수를 만들어 주고 삭제 처리를 해준다.

------------------------------------------------------------------

[ 수정하기 처리 ]

1. board_app/views.py 파일에 board_modify 에 구현해 준다.

2. 수정이라는 것은 글 내용을 먼저 보여주고 사용자가 새롭게 입력한 내용으로 저장해주는 것이다.

3. 현재 글 내용을 가져와서 보여주는 처리부터 한다.

4. 글 읽는 페이지와 동일하게 처리한다.

------------------------------------------------------------------

[ 수정 완료 처리 ]

1. 기본적으로 글 쓰는 페이지 처리와 비슷하다.

2. board_app/templates/board_modify.html 이 form 태그의 action을 
   /board/board_modify_result로 셋팅하고 
   csrf 토큰도 설정해준다.

3. form 태그에 enctype="multipart/form-data" 를 설정해준다.

4. board_app/urls.py 에 board_modify_result 주소를 등록한다.

5. board_app/views.py 에 board_modify_result 함수를 만들고 수정 처리를 해준다

------------------------------------------------------------------

